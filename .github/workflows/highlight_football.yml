name: Highlight Football Update
on:
  schedule:
    - cron: '15 0,12 * * *' # 07:15 และ 19:15 ไทย
  workflow_dispatch:
concurrency:
  group: highlight-football-update-${{ github.event_name }}-${{ github.run_id }}
  cancel-in-progress: true
jobs:
  update_highlight_football:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Trigger
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          echo "Run ID: ${{ github.run_id }}"
        timeout-minutes: 5
      - name: Check Workflow Lock
        run: |
          LOCK_FILE="workflow_lock.txt"
          if [ -f "$LOCK_FILE" ]; then
            echo "Another workflow is running, exiting"
            exit 1
          fi
          echo "Workflow running at $(date -u)" > $LOCK_FILE
          git add $LOCK_FILE
          git commit -m "Add workflow lock" || echo "No changes"
          git push origin main
          echo "WORKFLOW_LOCKED=true" >> $GITHUB_ENV
        timeout-minutes: 5
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        timeout-minutes: 10
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
        timeout-minutes: 10
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --timeout=100 requests beautifulsoup4 lxml python-telegram-bot dropbox
        env:
          PIP_CACHE_DIR: ~/.cache/pip
        timeout-minutes: 15
      - name: Run Highlight Football Scripts
        run: |
          echo "Running buaksib_update.py"
          python scripts/highlight_football/buaksib_update.py || echo "Error in buaksib_update.py"
          echo "Running dbidhl_update.py"
          python scripts/highlight_football/dbidhl_update.py || echo "Error in dbidhl_update.py"
          echo "Running dlshl_update.py"
          python scripts/highlight_football/dlshl_update.py || echo "Error in dlshl_update.py"
          echo "Running hugballhl_update.py"
          python scripts/highlight_football/hugballhl_update.py || echo "Error in hugballhl_update.py"
        timeout-minutes: 20
        continue-on-error: true
      - name: Commit & Push JSON
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add data/highlight_football/*.json
          git diff --staged --quiet || (git commit -m "Auto update Highlight Football" && git push origin main && echo "CHANGES_COMMITTED=true" >> $GITHUB_ENV)
        timeout-minutes: 10
      - name: Check Telegram Lock
        if: env.WORKFLOW_LOCKED == 'true'
        run: |
          TELEGRAM_LOCK="telegram_lock.txt"
          if [ -f "$TELEGRAM_LOCK" ]; then
            echo "Telegram already sent, skipping"
            exit 0
          fi
          echo "Sending Telegram notification at $(date -u)" > $TELEGRAM_LOCK
          git add $TELEGRAM_LOCK
          git commit -m "Add Telegram lock" || echo "No changes"
          git push origin main
          echo "SEND_TELEGRAM=true" >> $GITHUB_ENV
        timeout-minutes: 5
      - name: Send Telegram Notification
        if: env.WORKFLOW_LOCKED == 'true' && env.SEND_TELEGRAM == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<EOF
          import os, datetime, requests
          if os.getenv("TELEGRAM_SENT") == "true":
              print("Telegram already sent, skipping")
              exit(0)
          files = ["buaksibhl.json","dbidhl.json","dlshl.json","hugballhl.json"]
          token = os.environ["TELEGRAM_BOT_TOKEN"]
          chat_id = os.environ["TELEGRAM_CHAT_ID"]
          time_now = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=7)
          time_str = time_now.strftime("%d-%m-%Y %H:%M:%S")
          msg = "📁 อัปโหลดไฮไลท์ฟุตบอลสำเร็จ:\n\n"
          for f in files:
              msg += f"✅ /data/Highlight Football/{f}\n"
          msg += f"\n🎉 อัปโหลดทั้งหมดเสร็จสิ้นแล้ว {time_str}"
          r = requests.post(f"https://api.telegram.org/bot{token}/sendMessage",
                            data={"chat_id": chat_id, "text": msg})
          print(r.status_code, r.text)
          os.environ["TELEGRAM_SENT"] = "true"
          EOF
        timeout-minutes: 5
      - name: Clean Up Lock Files
        if: always()
        run: |
          git rm -f workflow_lock.txt telegram_lock.txt || echo "No lock files to remove"
          git commit -m "Remove lock files" || echo "No changes"
          git push origin main
        timeout-minutes: 5
